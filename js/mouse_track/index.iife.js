var MouseTrack=function(){"use strict";function e(){const e=function(e,r,t){const n=Math.floor(6*e),i=6*e-n,o=t*(1-r),a=t*(1-i*r),u=t*(1-(1-i)*r);let s,l,c;switch(n%6){case 0:s=t,l=u,c=o;break;case 1:s=a,l=t,c=o;break;case 2:s=o,l=t,c=u;break;case 3:s=o,l=a,c=t;break;case 4:s=u,l=o,c=t;break;case 5:s=t,l=o,c=a}return{r:s,g:l,b:c}}(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function r(e){if(0===e.length)return 0;let r=0;for(let t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return r}function t(e,r){let t=e.drawingBufferWidth/e.drawingBufferHeight;t<1&&(t=1/t);const n=Math.round(r),i=Math.round(r*t);return e.drawingBufferWidth>e.drawingBufferHeight?{width:i,height:n}:{width:n,height:i}}function n(e,r,t,i){if(!function(e,r,t,n){const i=e.createTexture();e.bindTexture(e.TEXTURE_2D,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,r,4,4,0,t,n,null);const o=e.createFramebuffer();return e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,i,0),e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE}(e,r,t,i))switch(r){case e.R16F:return n(e,e.RG16F,e.RG,i);case e.RG16F:return n(e,e.RGBA16F,e.RGBA,i);default:return null}return{internalFormat:r,format:t}}function i(e){const r=window.devicePixelRatio||1;return Math.floor(e*r)}function o(e,r,t,n){t=function(e,r){if(null==r)return e;let t="";return r.forEach((e=>{t+="#define "+e+"\n"})),t+e}(t,n);const i=e.createShader(r);return e.shaderSource(i,t),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS)||console.trace(e.getShaderInfoLog(i)),i}function a(e,r,t){let n=e.createProgram();return e.attachShader(n,r),e.attachShader(n,t),e.linkProgram(n),e.getProgramParameter(n,e.LINK_STATUS)||console.trace(e.getProgramInfoLog(n)),n}function u(e,r){let t=[],n=e.getProgramParameter(r,e.ACTIVE_UNIFORMS);for(let i=0;i<n;i++){let n=e.getActiveUniform(r,i).name;t[n]=e.getUniformLocation(r,n)}return t}class s{constructor(e,r,t){this.vertexShader=r,this.fragmentShaderSource=t,this.programs=[],this.activeProgram=null,this.uniforms=[],this.gl=e}setKeywords(e){const t=this.gl;let n=0;for(let t=0;t<e.length;t++)n+=r(e[t]);let i=this.programs[n];if(null==i){let r=o(t,t.FRAGMENT_SHADER,this.fragmentShaderSource,e);i=a(t,this.vertexShader,r),this.programs[n]=i}i!==this.activeProgram&&(this.uniforms=u(t,i),this.activeProgram=i)}bind(){this.gl.useProgram(this.activeProgram)}}class l{constructor(e,r,t){this.uniforms={},this.program=a(e,r,t),this.uniforms=u(e,this.program),this.gl=e}bind(){this.gl.useProgram(this.program)}}class c{constructor({canvas:e,gl:r,ext:t,config:n}){this.config=n,this.canvas=e,this.gl=r,this.ext=t,this.splatStack=[],this.pointers=[{id:-1,texcoordX:0,texcoordY:0,prevTexcoordX:0,prevTexcoordY:0,deltaX:0,deltaY:0,down:!1,moved:!1,color:[30,0,300]}],this.blit=(r.bindBuffer(r.ARRAY_BUFFER,r.createBuffer()),r.bufferData(r.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),r.STATIC_DRAW),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,r.createBuffer()),r.bufferData(r.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),r.STATIC_DRAW),r.vertexAttribPointer(0,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(0),(e,t=!1)=>{null==e?(r.viewport(0,0,r.drawingBufferWidth,r.drawingBufferHeight),r.bindFramebuffer(r.FRAMEBUFFER,null)):(r.viewport(0,0,e.width,e.height),r.bindFramebuffer(r.FRAMEBUFFER,e.fbo)),t&&(r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT)),r.drawElements(r.TRIANGLES,6,r.UNSIGNED_SHORT,0)}),this.dye=null,this.velocity=null,this.divergence=null,this.curl=null,this.pressure=null,this.bloom=null,this.bloomFramebuffers=[],this.sunrays=null,this.sunraysTemp=null,this.shaders={},this.ditheringTexture=function(e){let r=e.createTexture();return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texImage2D(e.TEXTURE_2D,0,e.RGB,1,1,0,e.RGB,e.UNSIGNED_BYTE,new Uint8Array([255,255,255])),{texture:r,width:1,height:1,attach:t=>(e.activeTexture(e.TEXTURE0+t),e.bindTexture(e.TEXTURE_2D,r),t)}}(r),this.initShaders(),this.updateKeywords(),this.initFramebuffers(),this.lastUpdateTime=Date.now(),this.colorUpdateTimer=0,this.update()}initShaders(){const e=this.shaders,r=this.gl,t=this.ext,n=o(r,r.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),i=o(r,r.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        float offset = 1.33333333;\n        vL = vUv - texelSize * offset;\n        vR = vUv + texelSize * offset;\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),a=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n        sum += texture2D(uTexture, vL) * 0.35294117;\n        sum += texture2D(uTexture, vR) * 0.35294117;\n        gl_FragColor = sum;\n    }\n"),u=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n"),c=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n"),m=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n"),v=o(r,r.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float aspectRatio;\n\n    #define SCALE 25.0\n\n    void main () {\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n        float v = mod(uv.x + uv.y, 2.0);\n        v = v * 0.1 + 0.8;\n        gl_FragColor = vec4(vec3(v), 1.0);\n    }\n"),f=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n"),h=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n"),g=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n"),d=o(r,r.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 c = texture2D(uTexture, vUv);\n        float br = max(c.r, max(c.g, c.b));\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n        gl_FragColor = c;\n    }\n"),T=o(r,r.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float weight;\n\n    #define ITERATIONS 16\n\n    void main () {\n        float Density = 0.3;\n        float Decay = 0.95;\n        float Exposure = 0.7;\n\n        vec2 coord = vUv;\n        vec2 dir = vUv - 0.5;\n\n        dir *= 1.0 / float(ITERATIONS) * Density;\n        float illuminationDecay = 1.0;\n\n        float color = texture2D(uTexture, vUv).a;\n\n        for (int i = 0; i < ITERATIONS; i++)\n        {\n            coord -= dir;\n            float col = texture2D(uTexture, coord).a;\n            color += col * illuminationDecay * weight;\n            illuminationDecay *= Decay;\n        }\n\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n    }\n"),p=o(r,r.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n"),x=o(r,r.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n    #ifdef MANUAL_FILTERING\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\n    #else\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        vec4 result = texture2D(uSource, coord);\n    #endif\n        float decay = 1.0 + dissipation * dt;\n        gl_FragColor = result / decay;\n    }",t.supportLinearFiltering?null:["MANUAL_FILTERING"]),E=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x < 0.0) { L = -C.x; }\n        if (vR.x > 1.0) { R = -C.x; }\n        if (vT.y > 1.0) { T = -C.y; }\n        if (vB.y < 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n"),R=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n"),S=o(r,r.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity += force * dt;\n        velocity = min(max(velocity, -1000.0), 1000.0);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n"),D=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n"),y=o(r,r.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n");e.blurProgram=new l(r,i,a),e.copyProgram=new l(r,n,u),e.clearProgram=new l(r,n,c),e.colorProgram=new l(r,n,m),e.checkerboardProgram=new l(r,n,v),e.bloomPrefilterProgram=new l(r,n,f),e.bloomBlurProgram=new l(r,n,h),e.bloomFinalProgram=new l(r,n,g),e.sunraysMaskProgram=new l(r,n,d),e.sunraysProgram=new l(r,n,T),e.splatProgram=new l(r,n,p),e.advectionProgram=new l(r,n,x),e.divergenceProgram=new l(r,n,E),e.curlProgram=new l(r,n,R),e.vorticityProgram=new l(r,n,S),e.pressureProgram=new l(r,n,D),e.gradienSubtractProgram=new l(r,n,y),e.displayMaterial=new s(r,n,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        float a = max(c.r, max(c.g, c.b));\n        gl_FragColor = vec4(c, a);\n    }\n")}updateKeywords(){const e=this.config;let r=[];e.SHADING&&r.push("SHADING"),e.BLOOM&&r.push("BLOOM"),e.SUNRAYS&&r.push("SUNRAYS"),this.shaders.displayMaterial.setKeywords(r)}initFramebuffers(){const e=this.gl,r=this.config,n=this.ext;let i=t(e,r.SIM_RESOLUTION),o=t(e,r.DYE_RESOLUTION);const a=n.halfFloatTexType,u=n.formatRGBA,s=n.formatRG,l=n.formatR,c=n.supportLinearFiltering?e.LINEAR:e.NEAREST;e.disable(e.BLEND),null==this.dye?this.dye=this.createDoubleFBO(o.width,o.height,u.internalFormat,u.format,a,c):this.dye=this.resizeDoubleFBO(this.dye,o.width,o.height,u.internalFormat,u.format,a,c),null==this.velocity?this.velocity=this.createDoubleFBO(i.width,i.height,s.internalFormat,s.format,a,c):this.velocity=this.resizeDoubleFBO(this.velocity,i.width,i.height,s.internalFormat,s.format,a,c),this.divergence=this.createFBO(i.width,i.height,l.internalFormat,l.format,a,e.NEAREST),this.curl=this.createFBO(i.width,i.height,l.internalFormat,l.format,a,e.NEAREST),this.pressure=this.createDoubleFBO(i.width,i.height,l.internalFormat,l.format,a,e.NEAREST),this.initBloomFramebuffers(),this.initSunraysFramebuffers()}initBloomFramebuffers(){const e=this.config,r=this.gl,n=this.ext;let i=t(r,e.BLOOM_RESOLUTION);const o=n.halfFloatTexType,a=n.formatRGBA,u=n.supportLinearFiltering?r.LINEAR:r.NEAREST;this.bloom=this.createFBO(i.width,i.height,a.internalFormat,a.format,o,u),this.bloomFramebuffers.length=0;for(let r=0;r<e.BLOOM_ITERATIONS;r++){let e=i.width>>r+1,t=i.height>>r+1;if(e<2||t<2)break;let n=this.createFBO(e,t,a.internalFormat,a.format,o,u);this.bloomFramebuffers.push(n)}}initSunraysFramebuffers(){const e=this.config,r=this.gl,n=this.ext;let i=t(r,e.SUNRAYS_RESOLUTION);const o=n.halfFloatTexType,a=n.formatR,u=n.supportLinearFiltering?r.LINEAR:r.NEAREST;this.sunrays=this.createFBO(i.width,i.height,a.internalFormat,a.format,o,u),this.sunraysTemp=this.createFBO(i.width,i.height,a.internalFormat,a.format,o,u)}createFBO(e,r,t,n,i,o){const a=this.gl;a.activeTexture(a.TEXTURE0);let u=a.createTexture();a.bindTexture(a.TEXTURE_2D,u),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,o),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,o),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texImage2D(a.TEXTURE_2D,0,t,e,r,0,n,i,null);let s=a.createFramebuffer();return a.bindFramebuffer(a.FRAMEBUFFER,s),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,u,0),a.viewport(0,0,e,r),a.clear(a.COLOR_BUFFER_BIT),{texture:u,fbo:s,width:e,height:r,texelSizeX:1/e,texelSizeY:1/r,attach:e=>(a.activeTexture(a.TEXTURE0+e),a.bindTexture(a.TEXTURE_2D,u),e)}}createDoubleFBO(e,r,t,n,i,o){let a=this.createFBO(e,r,t,n,i,o),u=this.createFBO(e,r,t,n,i,o);return{width:e,height:r,texelSizeX:a.texelSizeX,texelSizeY:a.texelSizeY,get read(){return a},set read(e){a=e},get write(){return u},set write(e){u=e},swap(){let e=a;a=u,u=e}}}resizeFBO(e,r,t,n,i,o,a){const u=this.gl,s=this.shaders.copyProgram;let l=this.createFBO(r,t,n,i,o,a);return s.bind(),u.uniform1i(s.uniforms.uTexture,e.attach(0)),this.blit(l),l}resizeDoubleFBO(e,r,t,n,i,o,a){return e.width===r&&e.height===t||(e.read=this.resizeFBO(e.read,r,t,n,i,o,a),e.write=this.createFBO(r,t,n,i,o,a),e.width=r,e.height=t,e.texelSizeX=1/r,e.texelSizeY=1/t),e}update(){const{config:e,lastUpdateTime:r,canvas:t}=this,n=function(e){const r=Date.now();let t=(r-e)/1e3;return t=Math.min(t,.016666),e=r,t}(r);t.resize()?this.initFramebuffers():(this.updateColors(n),this.applyInputs(),e.PAUSED||this.step(n),this.render(null),requestAnimationFrame((()=>{this.update()})))}updateColors(r){const{config:t,pointers:n}=this;t.COLORFUL&&(this.colorUpdateTimer+=r*t.COLOR_UPDATE_SPEED,this.colorUpdateTimer>=1&&(this.colorUpdateTimer=function(e,r,t){const n=t-r;return 0===n?r:(e-r)%n+r}(this.colorUpdateTimer,0,1),n.forEach((r=>{r.color=e()}))))}applyInputs(){const{splatStack:e,pointers:r,splatPointer:t,multipleSplats:n}=this;e.length>0&&n.call(this,e.pop()),r.forEach((e=>{e.moved&&(e.moved=!1,t.call(this,e))}))}step(e){const{gl:r,ext:t,config:n,shaders:i,curl:o,dye:a,velocity:u,divergence:s,pressure:l,blit:c}=this;r.disable(r.BLEND),i.curlProgram.bind(),r.uniform2f(i.curlProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),r.uniform1i(i.curlProgram.uniforms.uVelocity,u.read.attach(0)),c(o),i.vorticityProgram.bind(),r.uniform2f(i.vorticityProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),r.uniform1i(i.vorticityProgram.uniforms.uVelocity,u.read.attach(0)),r.uniform1i(i.vorticityProgram.uniforms.uCurl,o.attach(1)),r.uniform1f(i.vorticityProgram.uniforms.curl,n.CURL),r.uniform1f(i.vorticityProgram.uniforms.dt,e),c(u.write),u.swap(),i.divergenceProgram.bind(),r.uniform2f(i.divergenceProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),r.uniform1i(i.divergenceProgram.uniforms.uVelocity,u.read.attach(0)),c(s),i.clearProgram.bind(),r.uniform1i(i.clearProgram.uniforms.uTexture,l.read.attach(0)),r.uniform1f(i.clearProgram.uniforms.value,n.PRESSURE),c(l.write),l.swap(),i.pressureProgram.bind(),r.uniform2f(i.pressureProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),r.uniform1i(i.pressureProgram.uniforms.uDivergence,s.attach(0));for(let e=0;e<n.PRESSURE_ITERATIONS;e++)r.uniform1i(i.pressureProgram.uniforms.uPressure,l.read.attach(1)),c(l.write),l.swap();i.gradienSubtractProgram.bind(),r.uniform2f(i.gradienSubtractProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),r.uniform1i(i.gradienSubtractProgram.uniforms.uPressure,l.read.attach(0)),r.uniform1i(i.gradienSubtractProgram.uniforms.uVelocity,u.read.attach(1)),c(u.write),u.swap(),i.advectionProgram.bind(),r.uniform2f(i.advectionProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),t.supportLinearFiltering||r.uniform2f(i.advectionProgram.uniforms.dyeTexelSize,u.texelSizeX,u.texelSizeY);let m=u.read.attach(0);r.uniform1i(i.advectionProgram.uniforms.uVelocity,m),r.uniform1i(i.advectionProgram.uniforms.uSource,m),r.uniform1f(i.advectionProgram.uniforms.dt,e),r.uniform1f(i.advectionProgram.uniforms.dissipation,n.VELOCITY_DISSIPATION),c(u.write),u.swap(),t.supportLinearFiltering||r.uniform2f(i.advectionProgram.uniforms.dyeTexelSize,a.texelSizeX,a.texelSizeY),r.uniform1i(i.advectionProgram.uniforms.uVelocity,u.read.attach(0)),r.uniform1i(i.advectionProgram.uniforms.uSource,a.read.attach(1)),r.uniform1f(i.advectionProgram.uniforms.dissipation,n.DENSITY_DISSIPATION),c(a.write),a.swap()}render(e){const{gl:r,config:t,bloom:n,dye:i,sunrays:o,sunraysTemp:a}=this;var u;t.BLOOM&&this.applyBloom(i.read,n),t.SUNRAYS&&(this.applySunrays(i.read,i.write,o),this.applyBlur(o,a,1)),null!=e&&t.TRANSPARENT?r.disable(r.BLEND):(r.blendFunc(r.ONE,r.ONE_MINUS_SRC_ALPHA),r.enable(r.BLEND)),t.TRANSPARENT||this.drawColor(e,{r:(u=t.BACK_COLOR).r/255,g:u.g/255,b:u.b/255}),null==e&&t.TRANSPARENT&&this.drawCheckerboard(e),this.drawDisplay(e)}applyBloom(e,r){const{gl:t,config:n,bloomFramebuffers:i,shaders:o,blit:a}=this;if(i.length<2)return;let u=r;t.disable(t.BLEND),o.bloomPrefilterProgram.bind();let s=n.BLOOM_THRESHOLD*n.BLOOM_SOFT_KNEE+1e-4,l=n.BLOOM_THRESHOLD-s,c=2*s,m=.25/s;t.uniform3f(o.bloomPrefilterProgram.uniforms.curve,l,c,m),t.uniform1f(o.bloomPrefilterProgram.uniforms.threshold,n.BLOOM_THRESHOLD),t.uniform1i(o.bloomPrefilterProgram.uniforms.uTexture,e.attach(0)),a(u),o.bloomBlurProgram.bind();for(let e=0;e<i.length;e++){let r=i[e];t.uniform2f(o.bloomBlurProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),t.uniform1i(o.bloomBlurProgram.uniforms.uTexture,u.attach(0)),a(r),u=r}t.blendFunc(t.ONE,t.ONE),t.enable(t.BLEND);for(let e=i.length-2;e>=0;e--){let r=i[e];t.uniform2f(o.bloomBlurProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),t.uniform1i(o.bloomBlurProgram.uniforms.uTexture,u.attach(0)),t.viewport(0,0,r.width,r.height),a(r),u=r}t.disable(t.BLEND),o.bloomFinalProgram.bind(),t.uniform2f(o.bloomFinalProgram.uniforms.texelSize,u.texelSizeX,u.texelSizeY),t.uniform1i(o.bloomFinalProgram.uniforms.uTexture,u.attach(0)),t.uniform1f(o.bloomFinalProgram.uniforms.intensity,n.BLOOM_INTENSITY),a(r)}applySunrays(e,r,t){const{gl:n,config:i,shaders:o,blit:a}=this;n.disable(n.BLEND),o.sunraysMaskProgram.bind(),n.uniform1i(o.sunraysMaskProgram.uniforms.uTexture,e.attach(0)),a(r),o.sunraysProgram.bind(),n.uniform1f(o.sunraysProgram.uniforms.weight,i.SUNRAYS_WEIGHT),n.uniform1i(o.sunraysProgram.uniforms.uTexture,r.attach(0)),a(t)}applyBlur(e,r,t){const{gl:n,shaders:i,blit:o}=this;i.blurProgram.bind();for(let a=0;a<t;a++)n.uniform2f(i.blurProgram.uniforms.texelSize,e.texelSizeX,0),n.uniform1i(i.blurProgram.uniforms.uTexture,e.attach(0)),o(r),n.uniform2f(i.blurProgram.uniforms.texelSize,0,e.texelSizeY),n.uniform1i(i.blurProgram.uniforms.uTexture,r.attach(0)),o(e)}drawColor(e,r){const{gl:t,shaders:n,blit:i}=this;n.colorProgram.bind(),t.uniform4f(n.colorProgram.uniforms.color,r.r,r.g,r.b,1),i(e)}drawCheckerboard(e){const{gl:r,shaders:t,canvas:n,blit:i}=this;t.checkerboardProgram.bind(),r.uniform1f(t.checkerboardProgram.uniforms.aspectRatio,n.width/n.height),i(e)}drawDisplay(e){const{gl:r,dye:t,bloom:n,sunrays:i,ditheringTexture:o,shaders:a,config:u,blit:s}=this;let l=null==e?r.drawingBufferWidth:e.width,c=null==e?r.drawingBufferHeight:e.height;if(a.displayMaterial.bind(),u.SHADING&&r.uniform2f(a.displayMaterial.uniforms.texelSize,1/l,1/c),r.uniform1i(a.displayMaterial.uniforms.uTexture,t.read.attach(0)),u.BLOOM){r.uniform1i(a.displayMaterial.uniforms.uBloom,n.attach(1)),r.uniform1i(a.displayMaterial.uniforms.uDithering,o.attach(2));let e=function(e,r,t){return{x:r/e.width,y:t/e.height}}(o,l,c);r.uniform2f(a.displayMaterial.uniforms.ditherScale,e.x,e.y)}u.SUNRAYS&&r.uniform1i(a.displayMaterial.uniforms.uSunrays,i.attach(3)),s(e)}multipleSplats(r){const t=this.splat;for(let n=0;n<r;n++){const r=e();r.r*=10,r.g*=10,r.b*=10;const n=Math.random(),i=Math.random(),o=1e3*(Math.random()-.5),a=1e3*(Math.random()-.5);t.call(this,n,i,o,a,r)}}splat(e,r,t,n,i){const{gl:o,config:a,velocity:u,canvas:s,dye:l,shaders:c,blit:m}=this;c.splatProgram.bind(),o.uniform1i(c.splatProgram.uniforms.uTarget,u.read.attach(0)),o.uniform1f(c.splatProgram.uniforms.aspectRatio,s.width/s.height),o.uniform2f(c.splatProgram.uniforms.point,e,r),o.uniform3f(c.splatProgram.uniforms.color,t,n,0),o.uniform1f(c.splatProgram.uniforms.radius,function(e,r){const t=r.width/r.height;return t>1&&(e*=t),e}(a.SPLAT_RADIUS/100,s)),m(u.write),u.swap(),o.uniform1i(c.splatProgram.uniforms.uTarget,l.read.attach(0)),o.uniform3f(c.splatProgram.uniforms.color,i.r,i.g,i.b),m(l.write),l.swap()}splatPointer(e){const{config:r}=this;let t=e.deltaX*r.SPLAT_FORCE,n=e.deltaY*r.SPLAT_FORCE;this.splat(e.texcoordX,e.texcoordY,t,n,e.color)}updatePointerMoveData({pointer:e,posX:r,posY:t}){const n=this.canvas;e.prevTexcoordX=e.texcoordX,e.prevTexcoordY=e.texcoordY,e.texcoordX=r/n.width,e.texcoordY=1-t/n.height,e.deltaX=function(e,r){const t=e.width/e.height;return t<1&&(r*=t),r}(n,e.texcoordX-e.prevTexcoordX),e.deltaY=function(e,r){const t=e.width/e.height;return t>1&&(r/=t),r}(n,e.texcoordY-e.prevTexcoordY),e.moved=Math.abs(e.deltaX)>0||Math.abs(e.deltaY)>0}updatePointerDownData({pointer:r,id:t,posX:n,posY:i}){const o=this.canvas;r.id=t,r.down=!0,r.moved=!1,r.prevTexcoordX=r.texcoordX,r.prevTexcoordY=r.texcoordY,r.texcoordX=n/o.width,r.texcoordY=1-i/o.height,r.deltaX=0,r.deltaY=0,r.color=e()}}const m={SIM_RESOLUTION:128,DYE_RESOLUTION:1024,CAPTURE_RESOLUTION:512,DENSITY_DISSIPATION:5,VELOCITY_DISSIPATION:5,PRESSURE:.2,PRESSURE_ITERATIONS:25,CURL:5,SPLAT_RADIUS:.1,SPLAT_FORCE:12e3,SHADING:!0,COLORFUL:!0,COLOR_UPDATE_SPEED:.7,PAUSED:!1,BACK_COLOR:{r:0,g:0,b:0},TRANSPARENT:!1,BLOOM:!0,BLOOM_ITERATIONS:8,BLOOM_RESOLUTION:256,BLOOM_INTENSITY:.3,BLOOM_THRESHOLD:.7,BLOOM_SOFT_KNEE:.3,SUNRAYS:!0,SUNRAYS_RESOLUTION:196,SUNRAYS_WEIGHT:.8};return class{constructor(e,r){Object.defineProperty(this,"canvas",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"config",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),e.resize=this.resizeCanvas.bind(this),this.canvas=e,/Mobi|Android/i.test(navigator.userAgent)&&(m.DYE_RESOLUTION=512),this.config=Object.assign(Object.assign({},m),r),this.init()}init(){const{canvas:e,config:r}=this,{gl:t,ext:o}=function(e){const r={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1};let t=e.getContext("webgl2",r);const i=!!t;let o,a;i||(t=e.getContext("webgl",r)),i?(t.getExtension("EXT_color_buffer_float"),a=t.getExtension("OES_texture_float_linear"),t.RGBA16F):(o=t.getExtension("OES_texture_half_float"),a=t.getExtension("OES_texture_half_float_linear")),t.clearColor(0,0,0,1);const u=i?t.HALF_FLOAT:o.HALF_FLOAT_OES;let s,l,c;return i?(s=n(t,t.RGBA16F,t.RGBA,u),l=n(t,t.RG16F,t.RG,u),c=n(t,t.R16F,t.RED,u)):(s=n(t,t.RGBA,t.RGBA,u),l=n(t,t.RGBA,t.RGBA,u),c=n(t,t.RGBA,t.RGBA,u)),{gl:t,ext:{formatRGBA:s,formatRG:l,formatR:c,halfFloatTexType:u,supportLinearFiltering:a}}}(e);o.supportLinearFiltering||(r.DYE_RESOLUTION=512,r.SHADING=!1,r.BLOOM=!1,r.SUNRAYS=!1);const a=new c({canvas:e,gl:t,ext:o,config:r}),u=a.pointers;e.resize(),e.addEventListener("mouseover",(e=>{const r=i(e.offsetX),t=i(e.offsetY);let n=u.find((e=>-1===e.id));null==n&&(n={id:-1,texcoordX:0,texcoordY:0,prevTexcoordX:0,prevTexcoordY:0,deltaX:0,deltaY:0,down:!1,moved:!1,color:[30,0,300]}),a.updatePointerDownData({pointer:n,id:-1,posX:r,posY:t})})),e.addEventListener("mousemove",(e=>{const r=u[0];if(!r.down)return;const t=i(e.offsetX),n=i(e.offsetY);a.updatePointerMoveData({pointer:r,posX:t,posY:n})})),window.addEventListener("keydown",(e=>{const r=a.config,t=a.splatStack;"KeyP"===e.code&&(r.PAUSED=!r.PAUSED),"Space"===e.code&&t.push(parseInt(20*Math.random()+"")+5)}))}resizeCanvas(){const e=this.canvas,r=i(e.clientWidth),t=i(e.clientHeight);return(e.width!==r||e.height!==t)&&(e.width=r,e.height=t,!0)}}}();
